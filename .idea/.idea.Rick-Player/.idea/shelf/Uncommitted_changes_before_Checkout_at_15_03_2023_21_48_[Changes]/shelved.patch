Index: Rick-Player.Main/Services/ResquestAPI/YoutubeManager.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Rick_Player.Main.Services.ResquestAPI;\r\n\r\npublic class YoutubeManager\r\n{\r\n    private const string AcesseType = \"offline\";\r\n    private const string ApiKey = \"AIzaSyBpYkRFY2fJdOFHhw8W7hRexY4k2pA14CY\";\r\n    private const string Scopes = \"https://www.googleapis.com/auth/youtube\";\r\n    private const string RefreshToken = \"1//0h249N9l8i3MeCgYIARAAGBESNwF-L9IrUuFrA0lPOkpPI8ECzG9IDHukOew4Ji27Eh5NhDBTliLkhNVPVX6NqEYRULb67UxcP4E\";\r\n    \r\n    private const string OAuth = \"https://accounts.google.com/o/oauth2/v2/auth\";\r\n    private  const string PostEndPoint = \"https://oauth2.googleapis.com/token\";\r\n    private const string SearchEndPoint = \"https://www.googleapis.com/youtube/v3/search\";\r\n    private const string EndPoint = \"https://www.googleapis.com/youtube/v3/videos?part=snippet&id=PEHvT929IAE&key=AIzaSyBpYkRFY2fJdOFHhw8W7hRexY4k2pA14CY\";\r\n\r\n    private static readonly string ClientId;\r\n    private static readonly string ClientSecret;\r\n\r\n    private static readonly HttpClient HttpClient;\r\n\r\n    private readonly string _redirectUri;\r\n\r\n    public struct Tokens\r\n    {\r\n        public string AccessToken { get; set; }\r\n        public string RefreshToken { get; set; }\r\n\r\n        public Tokens(string accessToken, string refreshToken)\r\n        {\r\n            AccessToken = accessToken;\r\n            RefreshToken = refreshToken;\r\n        }\r\n    }\r\n\r\n    static YoutubeManager()\r\n    {\r\n        string? clientId = (\"751770806331-bp6btpu43rjird4b0d4n4k8akcm0550n.apps.googleusercontent.com\");\r\n        string? clientSecret = (\"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\");\r\n\r\n        if (clientId is null)\r\n            throw new YoutubeApiException(\"Environment Variable 'YOUTUBE_CLIENT_ID' was not found.\");\r\n        if (clientSecret is null)\r\n            throw new YoutubeApiException(\"Environment Variable 'YOUTUBE_CLIENT_SECRET' was not found.\");\r\n\r\n        ClientId = clientId;\r\n        ClientSecret = clientSecret;\r\n\r\n        HttpClient = new();\r\n    }\r\n\r\n    public YoutubeManager(string redirectUri)\r\n    {\r\n        _redirectUri = redirectUri;\r\n    }\r\n\r\n    private void SetBasicAuthHeader() => HttpClient.DefaultRequestHeaders.Authorization =\r\n        new AuthenticationHeaderValue(\"Basic\",\r\n            $\"{Convert.ToBase64String(Encoding.ASCII.GetBytes($\"{ClientId}:{ClientSecret}\"))}\");\r\n\r\n    private void SetBearerAuthHeader(string accessToken) => HttpClient.DefaultRequestHeaders.Authorization =\r\n        new AuthenticationHeaderValue(\"Bearer\", accessToken);\r\n\r\n    public Uri RequestUserAuthorizationUri(string state)\r\n    {\r\n        KeyValuePair<string, string?>[] parameters = new[]\r\n        {\r\n            new KeyValuePair<string, string?>(\"client_id\", ClientId),\r\n            new KeyValuePair<string, string?>(\"redirect_uri\", \"https://localhost:44357/validate\"),\r\n            new KeyValuePair<string, string?>(\"response_type\", \"code\"),\r\n            new KeyValuePair<string, string?>(\"scope\", Scopes),\r\n            new KeyValuePair<string, string?>(\"access_type\", AcesseType),\r\n            new KeyValuePair<string, string?>(\"state\", state)\r\n        };\r\n\r\n        return new Uri(OAuth + QueryString.Create(parameters).ToString());\r\n    }\r\n\r\n    public async Task<Tokens> RequestAccessAndRefreshTokensAsync(string authCode, string originalStateCode, string returnedStateCode)\r\n    {\r\n        if (originalStateCode != returnedStateCode)\r\n            throw new YoutubeApiException(\"Invalid state code returned by the server.\");\r\n\r\n        var content = new FormUrlEncodedContent(new[]\r\n        {\r\n            new KeyValuePair<string, string?>(\"client_id\", ClientId),\r\n            new KeyValuePair<string, string?>(\"client_secret\", ClientSecret),\r\n            new KeyValuePair<string, string?>(\"code\", authCode),\r\n            new KeyValuePair<string, string?>(\"grant_type\", \"authorization_code\"),\r\n            new KeyValuePair<string, string?>(\"redirect_uri\", \"https://localhost:44357/validate\")\r\n        });\r\n\r\n        SetBasicAuthHeader();\r\n        using HttpResponseMessage httpResponse =\r\n            await HttpClient.PostAsync(PostEndPoint, content);\r\n\r\n        httpResponse.EnsureSuccessStatusCode();\r\n\r\n        using JsonDocument jsonResponse = JsonDocument.Parse(await httpResponse.Content.ReadAsStringAsync());\r\n\r\n        string? accessToken = jsonResponse.RootElement.GetProperty(\"access_token\").GetString();\r\n        // string? refreshToken = jsonResponse.RootElement.GetProperty(\"refresh_token\").GetString();\r\n        string? refreshToken = RefreshToken;\r\n\r\n        if (accessToken is null)\r\n            throw new YoutubeApiException(\"Returned access token is null.\");\r\n\r\n        if (refreshToken is null)\r\n            throw new YoutubeApiException(\"Returned refresh token is null.\");\r\n\r\n        SetBearerAuthHeader(accessToken);\r\n\r\n        return new Tokens(accessToken, refreshToken);\r\n    }\r\n\r\n    public async Task<string> RefreshAccessTokenAsync(string refreshToken)\r\n    {\r\n        var content = new FormUrlEncodedContent(new[]\r\n        {\r\n            new KeyValuePair<string, string?>(\"grant_type\", \"refresh_token\"),\r\n            new KeyValuePair<string, string?>(\"refresh_token\", refreshToken)\r\n        });\r\n\r\n        SetBasicAuthHeader();\r\n        using HttpResponseMessage httpResponse =\r\n            await HttpClient.PostAsync(PostEndPoint, content);\r\n\r\n        httpResponse.EnsureSuccessStatusCode();\r\n\r\n        using JsonDocument jsonResponse = JsonDocument.Parse(await httpResponse.Content.ReadAsStringAsync());\r\n\r\n        string? newAccessToken = jsonResponse.RootElement.GetProperty(\"access_token\").GetString();\r\n\r\n        if (newAccessToken is null)\r\n            throw new YoutubeApiException(\"Returned access token is null.\");\r\n\r\n        SetBearerAuthHeader(newAccessToken);\r\n\r\n        return newAccessToken;\r\n    }\r\n\r\n    public async Task<Track?> GetCurrentlyPlayingAsync()\r\n    {\r\n        using HttpResponseMessage httpResponse = await HttpClient.GetAsync(EndPoint);\r\n\r\n        httpResponse.EnsureSuccessStatusCode();\r\n\r\n        if (httpResponse.StatusCode == HttpStatusCode.OK)\r\n        {\r\n            using JsonDocument jsonResponse = JsonDocument.Parse(await httpResponse.Content.ReadAsStringAsync());\r\n\r\n            Track currentTrack = GetTrackFromJson(jsonResponse.RootElement.GetProperty(\"items\"));\r\n\r\n            // currentTrack.ProgressMs = jsonResponse.RootElement.GetProperty(\"progress_ms\").GetInt32();\r\n\r\n            return currentTrack;\r\n        }\r\n        else\r\n            return null;\r\n    }\r\n\r\n    public async Task<List<Track>> SearchTracksAsync(string searchFor)\r\n    {\r\n        KeyValuePair<string, string>[] parameters = new[]\r\n        {\r\n            new KeyValuePair<string, string>(\"part\", \"snippet\"),\r\n            new KeyValuePair<string, string>(\"q\", searchFor),\r\n            new KeyValuePair<string, string>(\"type\", \"youtube#video\"),\r\n            new KeyValuePair<string, string>(\"maxResults\", \"10\"),\r\n            new KeyValuePair<string, string>(\"key\", ApiKey)\r\n        };\r\n\r\n        using HttpResponseMessage httpResponse =\r\n            await HttpClient.GetAsync(SearchEndPoint + QueryString.Create(parameters!));\r\n\r\n        httpResponse.EnsureSuccessStatusCode();\r\n\r\n        JsonDocument jsonResponse = JsonDocument.Parse(await httpResponse.Content.ReadAsStringAsync());\r\n\r\n        List<Track> searchedTracks = new();\r\n        foreach (JsonElement item in jsonResponse.RootElement.GetProperty(\"items\")\r\n                     .EnumerateArray())\r\n            searchedTracks.Add(GetTrackFromJson(item));\r\n\r\n        return searchedTracks;\r\n    }\r\n\r\n    public async Task AddToPlaybackQueueAsync(Track track)\r\n    {\r\n        using HttpResponseMessage httpResponse =\r\n            await HttpClient.PostAsync(\r\n                OAuth + \"/me/player/queue\" + QueryString.Create(\"uri\", $\"spotify:track:{track.VideoId}\"), null);\r\n\r\n        httpResponse.EnsureSuccessStatusCode();\r\n    }\r\n\r\n    private Track GetTrackFromJson(JsonElement item)\r\n    {\r\n        Track track = new();\r\n\r\n        JsonElement idElement = item.GetProperty(\"id\");\r\n\r\n        if (idElement.ValueKind == JsonValueKind.Object)\r\n        {\r\n            JsonElement videoIdElement = idElement.GetProperty(\"videoId\");\r\n            if (videoIdElement.ValueKind == JsonValueKind.String)\r\n            {\r\n                track.VideoId = videoIdElement.GetString();\r\n            }\r\n        }\r\n        // track.VideoId = item.GetProperty(\"id\").GetProperty(\"videoId\").GetString();\r\n        // track.SongName = item.GetProperty(\"name\").GetString();\r\n        // track.AlbumName = item.GetProperty(\"album\").GetProperty(\"name\").GetString();\r\n        // track.DurationMs = item.GetProperty(\"duration_ms\").GetInt32();\r\n        //\r\n        // foreach (JsonElement cover in item.GetProperty(\"album\").GetProperty(\"images\").EnumerateArray())\r\n        //     track.CoverSizesUrl.Add(cover.GetProperty(\"url\").GetString());\r\n        //\r\n        // foreach (JsonElement artist in item.GetProperty(\"artists\").EnumerateArray())\r\n        //     track.ArtistNames.Add(artist.GetProperty(\"name\").GetString());\r\n\r\n        return track;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Rick-Player.Main/Services/ResquestAPI/YoutubeManager.cs b/Rick-Player.Main/Services/ResquestAPI/YoutubeManager.cs
--- a/Rick-Player.Main/Services/ResquestAPI/YoutubeManager.cs	(revision a302e8816c4e58f1ff108eaa09861b2bb1bfcf1f)
+++ b/Rick-Player.Main/Services/ResquestAPI/YoutubeManager.cs	(date 1678927694243)
@@ -1,3 +1,9 @@
+using Rick_Player.Main.Data;
+using System.Net;
+using System.Net.Http.Headers;
+using System.Text;
+using System.Text.Json;
+
 namespace Rick_Player.Main.Services.ResquestAPI;
 
 public class YoutubeManager
Index: Rick-Player.Main/Services/RickPlayerManager.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Rick_Player.Main.Services;\r\n\r\npublic class RickPlayerManager\r\n{\r\n    #region Attributes and Constructor\r\n    public EventHandler? TimerUpdateEvent;\r\n    public EventHandler? VotingQueueUpdateEvent;\r\n\r\n    private readonly YoutubeManager _youtubeManager;\r\n    private readonly TimerManager _timerManager;\r\n\r\n    public Vote CurrentlyPlayingVote { get; private set; }\r\n    public List<Vote> PreviouslyPlayedVotes { get; private set; }\r\n    public List<Queue<Vote>> Votes { get; private set; }\r\n    public List<Client> Clients { get; private set; }\r\n\r\n    private YoutubeManager.Tokens _tokens;\r\n    private int _loopPeriodInMs = 0;\r\n\r\n    public RickPlayerManager(TimerManager timerManager, IWebHostEnvironment HostEnvironment)\r\n    {\r\n        _timerManager = timerManager;\r\n\r\n        _youtubeManager = new YoutubeManager(HostEnvironment.IsProduction() ? \"https://sparkflyblazor.azurewebsites.net/validate\" : \"https://localhost:5001/validate\");\r\n\r\n        CurrentlyPlayingVote = MakeDummyVote();\r\n        PreviouslyPlayedVotes = new List<Vote>();\r\n        Votes = new List<Queue<Vote>>();\r\n        Clients = new List<Client>();\r\n    }\r\n    #endregion\r\n\r\n    #region Spotify Methods\r\n    public Uri YoutubeSignInUri(string state)\r\n    {\r\n        try\r\n        {\r\n            return _youtubeManager.RequestUserAuthorizationUri(state);\r\n        }\r\n        catch (Exception)\r\n        {\r\n            throw;\r\n        }\r\n    }\r\n    public async Task YoutubeRequestTokensAsync(string authCode, string originalStateCode, string returnedStateCode)\r\n    {\r\n        try\r\n        {\r\n            _tokens = await _youtubeManager.RequestAccessAndRefreshTokensAsync(authCode, originalStateCode, returnedStateCode);\r\n\r\n            _timerManager.Stop();\r\n            Votes.Clear();\r\n            Clients.Clear();\r\n        }\r\n        catch (Exception)\r\n        {\r\n            throw;\r\n        }\r\n    }\r\n    private async Task youtubeRefreshAccessTokenAsync()\r\n    {\r\n        try\r\n        {\r\n            _tokens.AccessToken = await _youtubeManager.RefreshAccessTokenAsync(_tokens.RefreshToken);\r\n        }\r\n        catch (Exception)\r\n        {\r\n            throw;\r\n        }\r\n    }\r\n    private async Task<Track> YoutubeGetCurrentlyPlayingAsync()\r\n    {\r\n        try\r\n        {\r\n            return await _youtubeManager.GetCurrentlyPlayingAsync() ?? new Track().MakeThisDummy();\r\n        }\r\n        catch (HttpRequestException ex)\r\n        {\r\n            try\r\n            {\r\n                await HandleHttpExceptionAsync(ex);\r\n\r\n                return await _youtubeManager.GetCurrentlyPlayingAsync() ?? new Track().MakeThisDummy();\r\n            }\r\n            catch (Exception)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n    public async Task<List<Track>> SpotifySearchTracksAsync(string searchFor)\r\n    {\r\n        try\r\n        {\r\n            return await _youtubeManager.SearchTracksAsync(searchFor);\r\n        }\r\n        catch (HttpRequestException ex)\r\n        {\r\n            try\r\n            {\r\n                await HandleHttpExceptionAsync(ex);\r\n\r\n                return await _youtubeManager.SearchTracksAsync(searchFor);\r\n            }\r\n            catch (Exception)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n    private async Task YoutubeAddToPlaybackQueueAsync(Track track)\r\n    {\r\n        try\r\n        {\r\n            await _youtubeManager.AddToPlaybackQueueAsync(track);\r\n        }\r\n        catch (HttpRequestException ex)\r\n        {\r\n            try\r\n            {\r\n                await HandleHttpExceptionAsync(ex);\r\n\r\n                await _youtubeManager.AddToPlaybackQueueAsync(track);\r\n            }\r\n            catch (Exception)\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n    #endregion\r\n\r\n    #region Voting Queue Methods\r\n    protected virtual void OnVotingQueueUpdate() => VotingQueueUpdateEvent?.Invoke(this, EventArgs.Empty);\r\n    private Vote MakeDummyVote() => new(new Track().MakeThisDummy(), new Client(\"0\", \"Spotify\"));\r\n    private void ResetPriority(int priority)\r\n    {\r\n        Votes.RemoveAt(priority);\r\n\r\n        if (priority == 0)\r\n            PreviouslyPlayedVotes.Clear();\r\n    }\r\n\r\n    public Vote? TryPeekVotingQueue()\r\n    {\r\n        if (!Votes.Any())\r\n            return null;\r\n\r\n        return Votes[0].TryPeek(out Vote? voteOnTop) ? voteOnTop : null;\r\n    }\r\n\r\n    public void EnqueueVote(Track votedTrack, Client client)\r\n    {\r\n        if (votedTrack == null) throw new ArgumentNullException(nameof(votedTrack));\r\n        if (client == null) throw new ArgumentNullException(nameof(client));\r\n        int priority = 0;   // lower number means higher priority\r\n\r\n        for (priority = 0; priority < Votes.Count; priority++)\r\n        {\r\n            if (Votes[priority].Any(v => v.Client.Id == client.Id))\r\n                continue;\r\n\r\n            break;\r\n        }\r\n\r\n        if (priority == 0 && PreviouslyPlayedVotes.Any(v => v.Client.Id == client.Id))\r\n            priority = 1;\r\n\r\n        if (priority >= Votes.Count)\r\n            Votes.Add(new Queue<Vote>());\r\n\r\n        Votes[priority].Enqueue(new Vote(votedTrack, client));\r\n\r\n        OnVotingQueueUpdate();\r\n    }\r\n\r\n    public Vote? TryDequeueVote()\r\n    {\r\n        if (!Votes.Any())\r\n            return null;\r\n\r\n        Votes[0].TryDequeue(out Vote? dequeuedVote);\r\n\r\n        if (!Votes[0].Any())\r\n            ResetPriority(0);\r\n\r\n        return dequeuedVote;\r\n    }\r\n\r\n    public void RemoveVote(Track track, Client client)\r\n    {\r\n        for (int i = 0; i < Votes.Count; i++)\r\n        {\r\n            if (Votes[i].Any(v => v.VotedTrack.VideoId == track.VideoId && v.Client.Id == client.Id) == false)\r\n                continue;\r\n\r\n            Votes[i] = new Queue<Vote>(Votes[i].Where(v => !(v.VotedTrack.VideoId == track.VideoId && v.Client.Id == client.Id)));\r\n\r\n            if (!Votes[i].Any())\r\n                ResetPriority(i);\r\n\r\n            break;\r\n        }\r\n\r\n        OnVotingQueueUpdate();\r\n    }\r\n\r\n    public bool IsTrackVoted(Track track) => Votes.Exists(queue => queue.Where(vote => vote.VotedTrack.VideoId == track.VideoId).Any());\r\n    #endregion\r\n\r\n    #region Timer Methods\r\n    protected virtual void OnTimerUpdate() => TimerUpdateEvent?.Invoke(this, EventArgs.Empty);\r\n    public void StartTimer(int seconds = 5)\r\n    {\r\n        if (_timerManager.HasStarted)\r\n            StopTimer();\r\n\r\n        _timerManager.TimeElapsed += OnTimerElapsedAsync;\r\n\r\n        _timerManager.Start(seconds);\r\n\r\n        _loopPeriodInMs = seconds * 1000;\r\n    }\r\n\r\n    public void StopTimer()\r\n    {\r\n        _timerManager.TimeElapsed -= OnTimerElapsedAsync;\r\n\r\n        _timerManager.Stop();\r\n    }\r\n\r\n    private async void OnTimerElapsedAsync(object source, EventArgs args)\r\n    {\r\n        Track newestTrack = await YoutubeGetCurrentlyPlayingAsync();\r\n        Vote? nextVote = TryPeekVotingQueue();\r\n\r\n        if (newestTrack.VideoId != CurrentlyPlayingVote.VotedTrack.VideoId)\r\n        {\r\n            if (nextVote is not null && newestTrack.VideoId == nextVote.VotedTrack.VideoId)\r\n            {\r\n                TryDequeueVote();\r\n\r\n                PreviouslyPlayedVotes.Add(CurrentlyPlayingVote);\r\n                CurrentlyPlayingVote = nextVote;\r\n            }\r\n            else\r\n                CurrentlyPlayingVote = new Vote(newestTrack, new Client(\"0\", \"Youtube\"));\r\n        }\r\n\r\n        if (nextVote is not null && !nextVote.IsOnYoutubeQueue && (newestTrack.DurationMs - newestTrack.ProgressMs) < _loopPeriodInMs * 2)\r\n        {\r\n            await YoutubeAddToPlaybackQueueAsync(nextVote.VotedTrack);\r\n            nextVote.IsOnYoutubeQueue = true;\r\n        }\r\n\r\n        // TODO: else add a recommended track\r\n\r\n        OnTimerUpdate();\r\n    }\r\n    #endregion\r\n\r\n    #region Client Methods\r\n    public void UpdateClient(Client clientUpdated) => Clients[Clients.FindIndex(c => c.Id == clientUpdated.Id)] = clientUpdated;    // TODO: change the client in the queue\r\n    #endregion\r\n\r\n    #region Other Methods\r\n    private async Task HandleHttpExceptionAsync(HttpRequestException exception)\r\n    {\r\n        try\r\n        {\r\n            if (exception.StatusCode == HttpStatusCode.Unauthorized)\r\n                await youtubeRefreshAccessTokenAsync();\r\n        }\r\n        catch (Exception)\r\n        {\r\n            throw;\r\n        }\r\n    }\r\n    #endregion\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Rick-Player.Main/Services/RickPlayerManager.cs b/Rick-Player.Main/Services/RickPlayerManager.cs
--- a/Rick-Player.Main/Services/RickPlayerManager.cs	(revision a302e8816c4e58f1ff108eaa09861b2bb1bfcf1f)
+++ b/Rick-Player.Main/Services/RickPlayerManager.cs	(date 1678927703231)
@@ -1,5 +1,8 @@
 namespace Rick_Player.Main.Services;
-
+using Rick_Player.Main.Data;
+using System.Net;
+using Rick_Player.Main.Data;
+using Rick_Player.Main.Services.ResquestAPI;
 public class RickPlayerManager
 {
     #region Attributes and Constructor
