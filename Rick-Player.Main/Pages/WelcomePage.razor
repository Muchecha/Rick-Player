@page "/welcome"

@layout MainNoNavMenuLayout

@using Rick_Player.Main.Services
@using Rick_Player.Main.Services.ResquestAPI

@inject RickPlayerManager RickPlayer
@inject NavigationManager NavManager
@inject ProtectedLocalStorage LocalStorage

<PageTitle>Rick Player!!</PageTitle>


<MudStack Spacing="8">
    <MudText Typo="Typo.h3" Align="Align.Center">
        <MudIcon Icon="@Icons.Custom.Uncategorized.Bacteria" Size="Size.Large"/>
        <bold>Rick Player</bold>
    </MudText>

    <MudText Typo="Typo.h6" Align="Align.Center">
        Rick Player √© um aplicativo de c√≥digo aberto que permite que voc√™ e seus amigos ou√ßam m√∫sica juntos usando a fila do Youtube.
    </MudText>

    <MudDivider/>

    <MudText Typo="Typo.body1" Align="Align.Center">
        Antes de come√ßarmos, diga-nos o seu nome na caixa abaixo. Isso ajudar√° seus colegas de festa a identificar em quais m√∫sicas incr√≠veis voc√™ votou e qu√£o incr√≠vel √© (ou n√£o) seu gosto musical!
    </MudText>
    <MudText Class="mb-n6" Typo="Typo.body1" Align="Align.Center">
        e voc√™ foi convidado, j√° pode come√ßar a ouvir suas m√∫sicas favoritas e as de seus amigos, basta pressionar o bot√£o abaixo para iniciar üëá
    </MudText>
    <MudTextField @bind-Value="_clientNameInput" Label="Nome" HelperText="Por favor evite nomes estranhos."
                  Variant="Variant.Outlined" Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Outlined.BorderColor" AdornmentColor="Color.Warning"/>
    @if (_showErrorDialog)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-n4">
            Por favor, para continuar, escreva o seu nome na caixa acima e tente novamente!
        </MudAlert>
    }

    <MudButton OnClick="@GuestSignInAsync" Variant="Variant.Filled" Color="Color.Primary">
        ENTRAR COMO CONVIDADO
    </MudButton>

    <MudDivider/>

    <MudText Class="mt-2 mb-n6" Typo="Typo.body1" Align="Align.Center">
        Se voc√™ √© o anfitri√£o da festa, fa√ßa login usando sua conta do Youtube para que o Rick Player possa adicionar m√∫sicas √† fila para voc√™ e seus amigos. Aproveite ao m√°ximo essa experi√™ncia musical incr√≠vel!
    </MudText>
    <MudTextField @bind-Value="_clientLoginInput" Label="LOGIN"
                  Variant="Variant.Outlined" Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Outlined.BorderColor" AdornmentColor="Color.Warning"/>
    @if (_loginShowErrorDialog)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-n4">
            Por favor, para continuar, escreva o seu LOGIN na caixa acima e tente novamente!
        </MudAlert>
    }
    <MudTextField @bind-Value="_clientSenhaInput" Label="SENHA"
                  Variant="Variant.Outlined" Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Outlined.BorderColor" AdornmentColor="Color.Warning"/>
    @if (_senhaShowErrorDialog)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-n4">
            Por favor, para continuar, escreva sua SENHA na caixa acima e tente novamente!
        </MudAlert>
    }
    @if (_loginSenhaShowErrorDialog)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-n4">
                Login ou Senha incorretas!
            </MudAlert>
        }
    <MudButton OnClick="@YoutubeSignInAsync" Variant="Variant.Filled" Color="Color.Success">
        ENTRAR COM GOOGLE
    </MudButton>
</MudStack>


@code {
        private const int _MAX_CHARS = 26;

    private string? _clientNameInput;
    private string? _clientLoginInput;
    private string? _clientSenhaInput;
    private bool _showErrorDialog = false;
    private bool _loginShowErrorDialog = false;
    private bool _senhaShowErrorDialog = false;
    private bool _loginSenhaShowErrorDialog = false;

    private async Task YoutubeSignInAsync()
    {
        if (!ValidateNameSenha())
            return;

        await SaveClientMainAsync();

        string state = new Random().Next().ToString();
        await LocalStorage.SetAsync("state", state);

        try
        {
            NavManager.NavigateTo(RickPlayer.YoutubeSignInUri(state).ToString());
        }
        catch (Exception ex)
        {
            if (ex is YoutubeApiException || ex is HttpRequestException)
                NavManager.NavigateTo("/unhandled-error" + QueryString.Create("message", ex.Message));
            else
                throw;
        }
    }

    private async Task GuestSignInAsync()
    {
        if (!ValidateName())
            return;

        await SaveClientAsync();

        NavManager.NavigateTo("/help");
    }

    private bool ValidateNameSenha()
    {
        if (_clientLoginInput is null || _clientSenhaInput is null)
        {
            if (_clientLoginInput is null)
            {
                _loginShowErrorDialog = true;
                return false;
            }
            else
            {
                _senhaShowErrorDialog = true;
                return false;
            }
        }
        else
        {
            if (_clientLoginInput == "Muchecha" & _clientSenhaInput == "Much3ch4")
            {
                if (_clientLoginInput.Length > _MAX_CHARS)
                    _clientNameInput = _clientLoginInput.Substring(0, _MAX_CHARS);

                return true;
            }
            else
            {
                _loginSenhaShowErrorDialog = true;
                return false;
            }
            return false;
        }
    }

    private bool ValidateName()
    {
        if (_clientNameInput is null)
        {
            _showErrorDialog = true;
            return false;
        }
        else
        {
            if (_clientNameInput.Length > _MAX_CHARS)
                _clientNameInput = _clientNameInput.Substring(0, _MAX_CHARS);

            return true;
        }
    }

    private async Task SaveClientAsync()
    {
        Client thisClient = new Client(Guid.NewGuid().ToString(), _clientNameInput ??= "ERROR_NO_NAME_FOUND");

        RickPlayer.Clients.Add(thisClient);

        await LocalStorage.SetAsync("this_client", thisClient);
    }
    
    private async Task SaveClientMainAsync()
    {
        Client thisClient = new Client(Guid.NewGuid().ToString(), _clientLoginInput ??= "ERROR_NO_NAME_FOUND");

        RickPlayer.Clients.Add(thisClient);

        await LocalStorage.SetAsync("this_client", thisClient);
    }

}