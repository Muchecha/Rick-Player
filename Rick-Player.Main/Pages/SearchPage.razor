@page "/search"

@using Rick_Player.Main.Components
@using Rick_Player.Main.Services
@using Rick_Player.Main.Services.ResquestAPI

@inject RickPlayerManager RickPlayer
@inject NavigationManager NavManager
@inject ProtectedLocalStorage LocalStorage

<PageTitle>Buscando por uma música</PageTitle>

<MudStack Class="d-flex flex-column flex-grow-1 gap-4">
    <MudText Align="Align.Center" Typo="Typo.h4">
        Busca por suas músicas favoritas!
    </MudText>

    <MudText Align="Align.Center" Typo="Typo.body1">
        Chegou a hora de mostrar aos seus amigos o seu bom gosto musical!
    </MudText>

    <form @onsubmit="SearchTracksAsync">
        <MudContainer Class="px-0 my-4">
            <MudTextField class="object-top" @bind-Value="_userInput" Label="Pesquisa no Youtube" Variant="Variant.Outlined" OnAdornmentClick="@(async () => await SearchTracksAsync())" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" />
        </MudContainer>
    </form>

    @if (_searchedTracks is not null && _thisClient is not null)
    {
        <MudDivider />

        @foreach (Track track in _searchedTracks)
        {
            @if (RickPlayer.IsTrackVoted(track))
            {
                <TrackCard Track="track" OnClickCallback="EnqueueVote" />
            }
            else
            {
                <TrackCard Track="track" OnClickCallback="EnqueueVote" BtnFunc="TrackCard.BtnFunctionality.Add" />
            }
        }
    }
</MudStack>

@code {
    private string? _userInput;
    private List<Track>? _searchedTracks;
    private Client? _thisClient;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _thisClient = (await LocalStorage.GetAsync<Client>("this_client")).Value;
    }

    private void EnqueueVote(Track track)
    {
        if (_thisClient is not null)
            RickPlayer.EnqueueVote(track, _thisClient);
    }

    /* TODO: create UpdateUi() to check in real-time if a vote on _searchedTracks was added by another user */

    private async Task SearchTracksAsync()
    {
        if (_userInput is not null)
        {
            try
            {
                _searchedTracks = await RickPlayer.SpotifySearchTracksAsync(_userInput);
            }
            catch (Exception ex)
            {
                if (ex is YoutubeApiException || ex is HttpRequestException)
                    NavManager.NavigateTo("/unhandled-error" + QueryString.Create("message", ex.Message));
                else
                    throw;
            }
        }
    }
}